/*
 * AUDITORIA
 * # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Compliance;
import io.swagger.client.model.Details;
import io.swagger.client.model.Problems;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Audit
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-01-15T16:32:59.925Z[GMT]")
public class Audit {
  @SerializedName("approved")
  private Boolean approved = null;

  @SerializedName("impeachment")
  private String impeachment = null;

  @SerializedName("notes")
  private List<String> notes = new ArrayList<String>();

  @SerializedName("engine")
  private String engine = null;

  @SerializedName("front_plate")
  private String frontPlate = null;

  @SerializedName("rear_plate")
  private String rearPlate = null;

  @SerializedName("vin")
  private String vin = null;

  @SerializedName("details")
  private Details details = null;

  @SerializedName("compliance")
  private Compliance compliance = null;

  @SerializedName("problems")
  private Problems problems = null;

  public Audit approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

   /**
   * Informa se a vistoria foi aprovada ou reprovada pelo auditor.
   * @return approved
  **/
  @Schema(required = true, description = "Informa se a vistoria foi aprovada ou reprovada pelo auditor.")
  public Boolean isApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }

  public Audit impeachment(String impeachment) {
    this.impeachment = impeachment;
    return this;
  }

   /**
   * Neste campo o auditor pode sugerir a criação de impedimento para futuras vistorias do veículo.
   * @return impeachment
  **/
  @Schema(required = true, description = "Neste campo o auditor pode sugerir a criação de impedimento para futuras vistorias do veículo.")
  public String getImpeachment() {
    return impeachment;
  }

  public void setImpeachment(String impeachment) {
    this.impeachment = impeachment;
  }

  public Audit notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public Audit addNotesItem(String notesItem) {
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Observações adicionadas pelo auditor, referentes à auditoria.
   * @return notes
  **/
  @Schema(required = true, description = "Observações adicionadas pelo auditor, referentes à auditoria.")
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }

  public Audit engine(String engine) {
    this.engine = engine;
    return this;
  }

   /**
   * Número do motor.
   * @return engine
  **/
  @Schema(required = true, description = "Número do motor.")
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }

  public Audit frontPlate(String frontPlate) {
    this.frontPlate = frontPlate;
    return this;
  }

   /**
   * Placa dianteira.
   * @return frontPlate
  **/
  @Schema(required = true, description = "Placa dianteira.")
  public String getFrontPlate() {
    return frontPlate;
  }

  public void setFrontPlate(String frontPlate) {
    this.frontPlate = frontPlate;
  }

  public Audit rearPlate(String rearPlate) {
    this.rearPlate = rearPlate;
    return this;
  }

   /**
   * Placa traseira.
   * @return rearPlate
  **/
  @Schema(required = true, description = "Placa traseira.")
  public String getRearPlate() {
    return rearPlate;
  }

  public void setRearPlate(String rearPlate) {
    this.rearPlate = rearPlate;
  }

  public Audit vin(String vin) {
    this.vin = vin;
    return this;
  }

   /**
   * Número do chassi.
   * @return vin
  **/
  @Schema(required = true, description = "Número do chassi.")
  public String getVin() {
    return vin;
  }

  public void setVin(String vin) {
    this.vin = vin;
  }

  public Audit details(Details details) {
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @Schema(required = true, description = "")
  public Details getDetails() {
    return details;
  }

  public void setDetails(Details details) {
    this.details = details;
  }

  public Audit compliance(Compliance compliance) {
    this.compliance = compliance;
    return this;
  }

   /**
   * Get compliance
   * @return compliance
  **/
  @Schema(required = true, description = "")
  public Compliance getCompliance() {
    return compliance;
  }

  public void setCompliance(Compliance compliance) {
    this.compliance = compliance;
  }

  public Audit problems(Problems problems) {
    this.problems = problems;
    return this;
  }

   /**
   * Get problems
   * @return problems
  **/
  @Schema(required = true, description = "")
  public Problems getProblems() {
    return problems;
  }

  public void setProblems(Problems problems) {
    this.problems = problems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Audit audit = (Audit) o;
    return Objects.equals(this.approved, audit.approved) &&
        Objects.equals(this.impeachment, audit.impeachment) &&
        Objects.equals(this.notes, audit.notes) &&
        Objects.equals(this.engine, audit.engine) &&
        Objects.equals(this.frontPlate, audit.frontPlate) &&
        Objects.equals(this.rearPlate, audit.rearPlate) &&
        Objects.equals(this.vin, audit.vin) &&
        Objects.equals(this.details, audit.details) &&
        Objects.equals(this.compliance, audit.compliance) &&
        Objects.equals(this.problems, audit.problems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approved, impeachment, notes, engine, frontPlate, rearPlate, vin, details, compliance, problems);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Audit {\n");
    
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    impeachment: ").append(toIndentedString(impeachment)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    frontPlate: ").append(toIndentedString(frontPlate)).append("\n");
    sb.append("    rearPlate: ").append(toIndentedString(rearPlate)).append("\n");
    sb.append("    vin: ").append(toIndentedString(vin)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    problems: ").append(toIndentedString(problems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
